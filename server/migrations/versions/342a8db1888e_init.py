"""init

Revision ID: 342a8db1888e
Revises:
Create Date: 2024-02-07 21:00:42.512770

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "342a8db1888e"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "annotation_version",
        sa.Column("version_num", sa.String(length=12), nullable=False),
        sa.PrimaryKeyConstraint("version_num", name=op.f("pk_annotation_version")),
    )
    op.create_table(
        "assembly_version",
        sa.Column("version_num", sa.String(length=12), nullable=False),
        sa.PrimaryKeyConstraint("version_num", name=op.f("pk_assembly_version")),
    )
    op.create_table(
        "method",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("cls", sa.String(length=32), nullable=False),
        sa.Column("meth", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_method")),
    )
    op.create_table(
        "modomics",
        sa.Column("id", sa.String(length=128), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("short_name", sa.String(length=32), nullable=False),
        sa.Column("moiety", sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modomics")),
    )
    op.create_table(
        "project_contact",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contact_name", sa.String(length=128), nullable=False),
        sa.Column("contact_institution", sa.String(length=255), nullable=False),
        sa.Column("contact_email", sa.String(length=320), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_contact")),
    )
    op.create_table(
        "taxonomy",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("domain", sa.String(length=32), nullable=False),
        sa.Column("kingdom", sa.String(length=32), nullable=True),
        sa.Column("phylum", sa.String(length=32), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_taxonomy")),
    )
    op.create_table(
        "modification",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("modomics_id", sa.String(length=128), nullable=False),
        sa.Column("rna", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["modomics_id"],
            ["modomics.id"],
            name=op.f("fk_modification_modomics_id_modomics"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modification")),
        sa.UniqueConstraint(
            "modomics_id", "rna", name=op.f("uq_modification_modomics_id")
        ),
    )
    op.create_table(
        "ncbi_taxa",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("short_name", sa.String(length=128), nullable=False),
        sa.Column("taxonomy_id", sa.String(length=8), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxonomy_id"],
            ["taxonomy.id"],
            name=op.f("fk_ncbi_taxa_taxonomy_id_taxonomy"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ncbi_taxa")),
    )
    op.create_table(
        "project",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("summary", sa.Text(), nullable=False),
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("date_published", sa.DateTime(), nullable=False),
        sa.Column("date_added", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["contact_id"],
            ["project_contact.id"],
            name=op.f("fk_project_contact_id_project_contact"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project")),
    )
    op.create_table(
        "technology",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("method_id", sa.String(length=8), nullable=False),
        sa.Column("tech", sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["method_id"], ["method.id"], name=op.f("fk_technology_method_id_method")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_technology")),
        sa.UniqueConstraint("method_id", "tech", name=op.f("uq_technology_method_id")),
    )
    op.create_index(op.f("ix_technology_tech"), "technology", ["tech"], unique=False)
    op.create_table(
        "annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("release", sa.Integer(), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.String(length=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_annotation_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation")),
        sa.UniqueConstraint(
            "release", "taxa_id", "version", name=op.f("uq_annotation_release")
        ),
    )
    op.create_table(
        "assembly",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.String(length=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_assembly_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assembly")),
        sa.UniqueConstraint(
            "name", "taxa_id", "version", name=op.f("uq_assembly_name")
        ),
    )
    op.create_table(
        "dataset",
        sa.Column("id", sa.String(length=12), autoincrement=False, nullable=False),
        sa.Column("project_id", sa.String(length=8), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("lifted", sa.Boolean(), nullable=False),
        sa.Column("file_format", sa.String(length=32), nullable=False),
        sa.Column("modification_type", sa.String(length=32), nullable=False),
        sa.Column("sequencing_platform", sa.String(length=255), nullable=True),
        sa.Column("basecalling", sa.Text(), nullable=True),
        sa.Column("bioinformatics_workflow", sa.Text(), nullable=True),
        sa.Column("experiment", sa.Text(), nullable=True),
        sa.Column("external_source", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name=op.f("fk_dataset_project_id_project")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset")),
    )
    op.create_index(
        op.f("ix_dataset_project_id"), "dataset", ["project_id"], unique=False
    )
    op.create_table(
        "organism",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("cto", sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_organism_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organism")),
        sa.UniqueConstraint("taxa_id", "cto", name=op.f("uq_organism_taxa_id")),
    )
    op.create_index(op.f("ix_organism_cto"), "organism", ["cto"], unique=False)
    op.create_index(op.f("ix_organism_taxa_id"), "organism", ["taxa_id"], unique=False)
    op.create_table(
        "project_source",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.String(length=8), nullable=False),
        sa.Column("doi", sa.String(length=255), nullable=True),
        sa.Column("pmid", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
            name=op.f("fk_project_source_project_id_project"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_source")),
    )
    op.create_table(
        "genomic_annotation",
        sa.Column("id", sa.String(length=128), autoincrement=False, nullable=False),
        sa.Column("annotation_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("biotype", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["annotation_id"],
            ["annotation.id"],
            name=op.f("fk_genomic_annotation_annotation_id_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_genomic_annotation")),
    )
    op.create_index(
        op.f("ix_genomic_annotation_biotype"),
        "genomic_annotation",
        ["biotype"],
        unique=False,
    )
    op.create_index(
        op.f("ix_genomic_annotation_name"), "genomic_annotation", ["name"], unique=False
    )
    op.create_table(
        "selection",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("modification_id", sa.Integer(), nullable=False),
        sa.Column("technology_id", sa.Integer(), nullable=False),
        sa.Column("organism_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["modification_id"],
            ["modification.id"],
            name=op.f("fk_selection_modification_id_modification"),
        ),
        sa.ForeignKeyConstraint(
            ["organism_id"],
            ["organism.id"],
            name=op.f("fk_selection_organism_id_organism"),
        ),
        sa.ForeignKeyConstraint(
            ["technology_id"],
            ["technology.id"],
            name=op.f("fk_selection_technology_id_technology"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_selection")),
    )
    op.create_index(
        "idx_select",
        "selection",
        ["modification_id", "technology_id", "organism_id"],
        unique=True,
    )
    op.create_table(
        "association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.String(length=12), nullable=False),
        sa.Column("selection_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.id"],
            name=op.f("fk_association_dataset_id_dataset"),
        ),
        sa.ForeignKeyConstraint(
            ["selection_id"],
            ["selection.id"],
            name=op.f("fk_association_selection_id_selection"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_association")),
    )
    op.create_index(
        "idx_assoc", "association", ["dataset_id", "selection_id"], unique=True
    )
    op.create_table(
        "data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("association_id", sa.Integer(), nullable=False),
        sa.Column("chrom", sa.String(length=128), nullable=False),
        sa.Column("start", sa.Integer(), nullable=False),
        sa.Column("end", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("score", sa.Integer(), nullable=False),
        sa.Column("strand", sa.String(length=1), nullable=False),
        sa.Column("thick_start", sa.Integer(), nullable=False),
        sa.Column("thick_end", sa.Integer(), nullable=False),
        sa.Column("item_rgb", sa.String(length=128), nullable=False),
        sa.Column("coverage", sa.Integer(), nullable=False),
        sa.Column("frequency", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["association_id"],
            ["association.id"],
            name=op.f("fk_data_association_id_association"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data")),
    )
    op.create_index(
        "idx_data_sort",
        "data",
        ["chrom", "start", "score", "coverage", "frequency"],
        unique=False,
    )
    op.create_index(
        op.f("ix_data_association_id"), "data", ["association_id"], unique=False
    )
    op.create_table(
        "data_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("gene_id", sa.String(length=128), nullable=False),
        sa.Column("data_id", sa.Integer(), nullable=False),
        sa.Column("feature", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_id"], ["data.id"], name=op.f("fk_data_annotation_data_id_data")
        ),
        sa.ForeignKeyConstraint(
            ["gene_id"],
            ["genomic_annotation.id"],
            name=op.f("fk_data_annotation_gene_id_genomic_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data_annotation")),
        sa.UniqueConstraint(
            "gene_id", "data_id", "feature", name=op.f("uq_data_annotation_gene_id")
        ),
    )
    op.create_index(
        op.f("ix_data_annotation_data_id"), "data_annotation", ["data_id"], unique=False
    )
    op.create_index(
        op.f("ix_data_annotation_feature"), "data_annotation", ["feature"], unique=False
    )
    op.create_index(
        op.f("ix_data_annotation_gene_id"), "data_annotation", ["gene_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_data_annotation_gene_id"), table_name="data_annotation")
    op.drop_index(op.f("ix_data_annotation_feature"), table_name="data_annotation")
    op.drop_index(op.f("ix_data_annotation_data_id"), table_name="data_annotation")
    op.drop_table("data_annotation")
    op.drop_index(op.f("ix_data_association_id"), table_name="data")
    op.drop_index("idx_data_sort", table_name="data")
    op.drop_table("data")
    op.drop_index("idx_assoc", table_name="association")
    op.drop_table("association")
    op.drop_index("idx_select", table_name="selection")
    op.drop_table("selection")
    op.drop_index(op.f("ix_genomic_annotation_name"), table_name="genomic_annotation")
    op.drop_index(
        op.f("ix_genomic_annotation_biotype"), table_name="genomic_annotation"
    )
    op.drop_table("genomic_annotation")
    op.drop_table("project_source")
    op.drop_index(op.f("ix_organism_taxa_id"), table_name="organism")
    op.drop_index(op.f("ix_organism_cto"), table_name="organism")
    op.drop_table("organism")
    op.drop_index(op.f("ix_dataset_project_id"), table_name="dataset")
    op.drop_table("dataset")
    op.drop_table("assembly")
    op.drop_table("annotation")
    op.drop_index(op.f("ix_technology_tech"), table_name="technology")
    op.drop_table("technology")
    op.drop_table("project")
    op.drop_table("ncbi_taxa")
    op.drop_table("modification")
    op.drop_table("taxonomy")
    op.drop_table("project_contact")
    op.drop_table("modomics")
    op.drop_table("method")
    op.drop_table("assembly_version")
    op.drop_table("annotation_version")
    # ### end Alembic commands ###
