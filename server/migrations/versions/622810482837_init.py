"""init

Revision ID: 622810482837
Revises:
Create Date: 2024-05-31 14:50:48.817608

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "622810482837"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "annotation_version",
        sa.Column("version_num", sa.String(length=12), nullable=False),
        sa.PrimaryKeyConstraint("version_num", name=op.f("pk_annotation_version")),
    )
    op.create_table(
        "assembly_version",
        sa.Column("version_num", sa.String(length=12), nullable=False),
        sa.PrimaryKeyConstraint("version_num", name=op.f("pk_assembly_version")),
    )
    op.create_table(
        "method",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("cls", sa.String(length=32), nullable=False),
        sa.Column("meth", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_method")),
        sa.UniqueConstraint("meth", name=op.f("uq_method_meth")),
    )
    op.create_table(
        "modomics",
        sa.Column("id", sa.String(length=128), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("short_name", sa.String(length=32), nullable=False),
        sa.Column("moiety", sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modomics")),
        sa.UniqueConstraint("name", name=op.f("uq_modomics_name")),
        sa.UniqueConstraint("short_name", name=op.f("uq_modomics_short_name")),
    )
    op.create_table(
        "project_contact",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contact_name", sa.String(length=128), nullable=False),
        sa.Column("contact_institution", sa.String(length=255), nullable=False),
        sa.Column("contact_email", sa.String(length=320), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_contact")),
    )
    op.create_table(
        "rna_type",
        sa.Column("id", sa.String(length=32), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_rna_type")),
        sa.UniqueConstraint("name", name=op.f("uq_rna_type_name")),
    )
    op.create_table(
        "taxonomy",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("domain", sa.String(length=32), nullable=False),
        sa.Column("kingdom", sa.String(length=32), nullable=True),
        sa.Column("phylum", sa.String(length=32), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_taxonomy")),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column(
            "state",
            sa.Enum("wait_for_confirmation", "active", name="userstate"),
            nullable=False,
        ),
        sa.Column("password_hash", sa.String(length=128), nullable=True),
        sa.Column("confirmation_token", sa.String(length=32), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "modification",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("modomics_id", sa.String(length=128), nullable=False),
        sa.Column("rna", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["modomics_id"],
            ["modomics.id"],
            name=op.f("fk_modification_modomics_id_modomics"),
        ),
        sa.ForeignKeyConstraint(
            ["rna"], ["rna_type.id"], name=op.f("fk_modification_rna_rna_type")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modification")),
        sa.UniqueConstraint(
            "modomics_id", "rna", name=op.f("uq_modification_modomics_id")
        ),
    )
    op.create_index(
        op.f("ix_modification_modomics_id"),
        "modification",
        ["modomics_id"],
        unique=False,
    )
    op.create_table(
        "ncbi_taxa",
        sa.Column("id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("short_name", sa.String(length=128), nullable=False),
        sa.Column("taxonomy_id", sa.String(length=8), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxonomy_id"],
            ["taxonomy.id"],
            name=op.f("fk_ncbi_taxa_taxonomy_id_taxonomy"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ncbi_taxa")),
        sa.UniqueConstraint("name", name=op.f("uq_ncbi_taxa_name")),
        sa.UniqueConstraint("short_name", name=op.f("uq_ncbi_taxa_short_name")),
    )
    op.create_index(
        op.f("ix_ncbi_taxa_taxonomy_id"), "ncbi_taxa", ["taxonomy_id"], unique=False
    )
    op.create_table(
        "project",
        sa.Column("id", sa.String(length=8), autoincrement=False, nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("summary", sa.Text(), nullable=False),
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.Column("date_published", sa.DateTime(), nullable=True),
        sa.Column("date_added", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["contact_id"],
            ["project_contact.id"],
            name=op.f("fk_project_contact_id_project_contact"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project")),
    )
    op.create_index(
        op.f("ix_project_contact_id"), "project", ["contact_id"], unique=False
    )
    op.create_table(
        "technology",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("method_id", sa.String(length=8), nullable=False),
        sa.Column("tech", sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["method_id"], ["method.id"], name=op.f("fk_technology_method_id_method")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_technology")),
        sa.UniqueConstraint("method_id", "tech", name=op.f("uq_technology_method_id")),
    )
    op.create_index(
        op.f("ix_technology_method_id"), "technology", ["method_id"], unique=False
    )
    op.create_index(op.f("ix_technology_tech"), "technology", ["tech"], unique=False)
    op.create_table(
        "annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("release", sa.Integer(), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.String(length=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_annotation_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation")),
        sa.UniqueConstraint("release", "taxa_id", "version", name="uq_annotation_rtv"),
    )
    op.create_index(
        op.f("ix_annotation_taxa_id"), "annotation", ["taxa_id"], unique=False
    )
    op.create_table(
        "assembly",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.String(length=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_assembly_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_assembly")),
        sa.UniqueConstraint("name", "taxa_id", "version", name="uq_assembly_ntv"),
        sa.UniqueConstraint("name", name=op.f("uq_assembly_name")),
    )
    op.create_index(op.f("ix_assembly_taxa_id"), "assembly", ["taxa_id"], unique=False)
    op.create_table(
        "organism",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("taxa_id", sa.Integer(), nullable=False),
        sa.Column("cto", sa.String(length=255), nullable=False),
        sa.ForeignKeyConstraint(
            ["taxa_id"], ["ncbi_taxa.id"], name=op.f("fk_organism_taxa_id_ncbi_taxa")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organism")),
        sa.UniqueConstraint("taxa_id", "cto", name=op.f("uq_organism_taxa_id")),
    )
    op.create_index(op.f("ix_organism_cto"), "organism", ["cto"], unique=False)
    op.create_index(op.f("ix_organism_taxa_id"), "organism", ["taxa_id"], unique=False)
    op.create_table(
        "project_source",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.String(length=8), nullable=False),
        sa.Column("doi", sa.String(length=255), nullable=True),
        sa.Column("pmid", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
            name=op.f("fk_project_source_project_id_project"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_project_source")),
    )
    op.create_index(
        op.f("ix_project_source_project_id"),
        "project_source",
        ["project_id"],
        unique=False,
    )
    op.create_table(
        "user_project_association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.String(length=8), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
            name=op.f("fk_user_project_association_project_id_project"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("fk_user_project_association_user_id_user"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_project_association")),
    )
    op.create_index(
        op.f("ix_user_project_association_project_id"),
        "user_project_association",
        ["project_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_project_association_user_id"),
        "user_project_association",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "dataset",
        sa.Column("id", sa.String(length=12), autoincrement=False, nullable=False),
        sa.Column("project_id", sa.String(length=8), nullable=False),
        sa.Column("technology_id", sa.Integer(), nullable=False),
        sa.Column("organism_id", sa.Integer(), nullable=False),
        sa.Column("date_added", sa.DateTime(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("modification_type", sa.String(length=32), nullable=False),
        sa.Column("sequencing_platform", sa.String(length=255), nullable=True),
        sa.Column("basecalling", sa.Text(), nullable=True),
        sa.Column("bioinformatics_workflow", sa.Text(), nullable=True),
        sa.Column("experiment", sa.Text(), nullable=True),
        sa.Column("external_source", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["organism_id"],
            ["organism.id"],
            name=op.f("fk_dataset_organism_id_organism"),
        ),
        sa.ForeignKeyConstraint(
            ["project_id"], ["project.id"], name=op.f("fk_dataset_project_id_project")
        ),
        sa.ForeignKeyConstraint(
            ["technology_id"],
            ["technology.id"],
            name=op.f("fk_dataset_technology_id_technology"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset")),
    )
    op.create_index(
        op.f("ix_dataset_organism_id"), "dataset", ["organism_id"], unique=False
    )
    op.create_index(
        op.f("ix_dataset_project_id"), "dataset", ["project_id"], unique=False
    )
    op.create_index(
        op.f("ix_dataset_technology_id"), "dataset", ["technology_id"], unique=False
    )
    op.create_table(
        "genomic_annotation",
        sa.Column("id", sa.String(length=128), autoincrement=False, nullable=False),
        sa.Column("annotation_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=True),
        sa.Column("biotype", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(
            ["annotation_id"],
            ["annotation.id"],
            name=op.f("fk_genomic_annotation_annotation_id_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_genomic_annotation")),
    )
    op.create_index(
        "idx_genomic",
        "genomic_annotation",
        ["annotation_id", "biotype", "name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_genomic_annotation_annotation_id"),
        "genomic_annotation",
        ["annotation_id"],
        unique=False,
    )
    op.create_table(
        "selection",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("modification_id", sa.Integer(), nullable=False),
        sa.Column("organism_id", sa.Integer(), nullable=False),
        sa.Column("technology_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["modification_id"],
            ["modification.id"],
            name=op.f("fk_selection_modification_id_modification"),
        ),
        sa.ForeignKeyConstraint(
            ["organism_id"],
            ["organism.id"],
            name=op.f("fk_selection_organism_id_organism"),
        ),
        sa.ForeignKeyConstraint(
            ["technology_id"],
            ["technology.id"],
            name=op.f("fk_selection_technology_id_technology"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_selection")),
    )
    op.create_index(
        "idx_select",
        "selection",
        ["modification_id", "organism_id", "technology_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_selection_modification_id"),
        "selection",
        ["modification_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_selection_organism_id"), "selection", ["organism_id"], unique=False
    )
    op.create_index(
        op.f("ix_selection_technology_id"), "selection", ["technology_id"], unique=False
    )
    op.create_table(
        "bam_file",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("original_file_name", sa.String(length=1024), nullable=False),
        sa.Column("storage_file_name", sa.String(length=256), nullable=False),
        sa.Column("dataset_id", sa.String(length=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["dataset.id"], name=op.f("fk_bam_file_dataset_id_dataset")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_bam_file")),
        sa.UniqueConstraint(
            "storage_file_name", name=op.f("uq_bam_file_storage_file_name")
        ),
    )
    op.create_index(
        op.f("ix_bam_file_dataset_id"), "bam_file", ["dataset_id"], unique=False
    )
    op.create_table(
        "data",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.String(length=12), nullable=False),
        sa.Column("modification_id", sa.Integer(), nullable=False),
        sa.Column("chrom", sa.String(length=128), nullable=False),
        sa.Column("start", sa.Integer(), nullable=False),
        sa.Column("end", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("score", sa.Integer(), nullable=False),
        sa.Column("strand", sa.String(length=1), nullable=False),
        sa.Column("thick_start", sa.Integer(), nullable=False),
        sa.Column("thick_end", sa.Integer(), nullable=False),
        sa.Column("item_rgb", sa.String(length=128), nullable=False),
        sa.Column("coverage", sa.Integer(), nullable=False),
        sa.Column("frequency", sa.Integer(), nullable=False),
        sa.CheckConstraint("coverage > 0", name=op.f("ck_data_cov_strict")),
        sa.CheckConstraint("frequency <= 100", name=op.f("ck_data_freq_max")),
        sa.CheckConstraint("frequency > 0", name=op.f("ck_data_freq_strict")),
        sa.CheckConstraint("score <= 1000", name=op.f("ck_data_score_max")),
        sa.CheckConstraint("score >= 0", name=op.f("ck_data_score")),
        sa.CheckConstraint("start < end", name=op.f("ck_data_start_end")),
        sa.CheckConstraint("start >= 0", name=op.f("ck_data_start")),
        sa.CheckConstraint("thick_start < thick_end", name=op.f("ck_data_tstart_end")),
        sa.CheckConstraint("thick_start >= 0", name=op.f("ck_data_tstart")),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["dataset.id"], name=op.f("fk_data_dataset_id_dataset")
        ),
        sa.ForeignKeyConstraint(
            ["modification_id"],
            ["modification.id"],
            name=op.f("fk_data_modification_id_modification"),
        ),
        sa.ForeignKeyConstraint(
            ["name"], ["modomics.short_name"], name=op.f("fk_data_name_modomics")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data")),
    )
    op.create_index("idx_data_sort", "data", ["chrom", "start", "end"], unique=False)
    op.create_index(op.f("ix_data_coverage"), "data", ["coverage"], unique=False)
    op.create_index(op.f("ix_data_dataset_id"), "data", ["dataset_id"], unique=False)
    op.create_index(op.f("ix_data_frequency"), "data", ["frequency"], unique=False)
    op.create_index(
        op.f("ix_data_modification_id"), "data", ["modification_id"], unique=False
    )
    op.create_index(op.f("ix_data_score"), "data", ["score"], unique=False)
    op.create_table(
        "dataset_modification_association",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.String(length=12), nullable=False),
        sa.Column("modification_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.id"],
            name=op.f("fk_dataset_modification_association_dataset_id_dataset"),
        ),
        sa.ForeignKeyConstraint(
            ["modification_id"],
            ["modification.id"],
            name=op.f(
                "fk_dataset_modification_association_modification_id_modification"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dataset_modification_association")),
    )
    op.create_index(
        "idx_assoc",
        "dataset_modification_association",
        ["dataset_id", "modification_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_dataset_modification_association_dataset_id"),
        "dataset_modification_association",
        ["dataset_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_dataset_modification_association_modification_id"),
        "dataset_modification_association",
        ["modification_id"],
        unique=False,
    )
    op.create_table(
        "data_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("data_id", sa.Integer(), nullable=False),
        sa.Column("gene_id", sa.String(length=128), nullable=False),
        sa.Column("feature", sa.String(length=32), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_id"], ["data.id"], name=op.f("fk_data_annotation_data_id_data")
        ),
        sa.ForeignKeyConstraint(
            ["gene_id"],
            ["genomic_annotation.id"],
            name=op.f("fk_data_annotation_gene_id_genomic_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data_annotation")),
        sa.UniqueConstraint(
            "data_id", "gene_id", "feature", name=op.f("uq_data_annotation_data_id")
        ),
    )
    op.create_index(
        op.f("ix_data_annotation_data_id"), "data_annotation", ["data_id"], unique=False
    )
    op.create_index(
        op.f("ix_data_annotation_feature"), "data_annotation", ["feature"], unique=False
    )
    op.create_index(
        op.f("ix_data_annotation_gene_id"), "data_annotation", ["gene_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_data_annotation_gene_id"), table_name="data_annotation")
    op.drop_index(op.f("ix_data_annotation_feature"), table_name="data_annotation")
    op.drop_index(op.f("ix_data_annotation_data_id"), table_name="data_annotation")
    op.drop_table("data_annotation")
    op.drop_index(
        op.f("ix_dataset_modification_association_modification_id"),
        table_name="dataset_modification_association",
    )
    op.drop_index(
        op.f("ix_dataset_modification_association_dataset_id"),
        table_name="dataset_modification_association",
    )
    op.drop_index("idx_assoc", table_name="dataset_modification_association")
    op.drop_table("dataset_modification_association")
    op.drop_index(op.f("ix_data_score"), table_name="data")
    op.drop_index(op.f("ix_data_modification_id"), table_name="data")
    op.drop_index(op.f("ix_data_frequency"), table_name="data")
    op.drop_index(op.f("ix_data_dataset_id"), table_name="data")
    op.drop_index(op.f("ix_data_coverage"), table_name="data")
    op.drop_index("idx_data_sort", table_name="data")
    op.drop_table("data")
    op.drop_index(op.f("ix_bam_file_dataset_id"), table_name="bam_file")
    op.drop_table("bam_file")
    op.drop_index(op.f("ix_selection_technology_id"), table_name="selection")
    op.drop_index(op.f("ix_selection_organism_id"), table_name="selection")
    op.drop_index(op.f("ix_selection_modification_id"), table_name="selection")
    op.drop_index("idx_select", table_name="selection")
    op.drop_table("selection")
    op.drop_index(
        op.f("ix_genomic_annotation_annotation_id"), table_name="genomic_annotation"
    )
    op.drop_index("idx_genomic", table_name="genomic_annotation")
    op.drop_table("genomic_annotation")
    op.drop_index(op.f("ix_dataset_technology_id"), table_name="dataset")
    op.drop_index(op.f("ix_dataset_project_id"), table_name="dataset")
    op.drop_index(op.f("ix_dataset_organism_id"), table_name="dataset")
    op.drop_table("dataset")
    op.drop_index(
        op.f("ix_user_project_association_user_id"),
        table_name="user_project_association",
    )
    op.drop_index(
        op.f("ix_user_project_association_project_id"),
        table_name="user_project_association",
    )
    op.drop_table("user_project_association")
    op.drop_index(op.f("ix_project_source_project_id"), table_name="project_source")
    op.drop_table("project_source")
    op.drop_index(op.f("ix_organism_taxa_id"), table_name="organism")
    op.drop_index(op.f("ix_organism_cto"), table_name="organism")
    op.drop_table("organism")
    op.drop_index(op.f("ix_assembly_taxa_id"), table_name="assembly")
    op.drop_table("assembly")
    op.drop_index(op.f("ix_annotation_taxa_id"), table_name="annotation")
    op.drop_table("annotation")
    op.drop_index(op.f("ix_technology_tech"), table_name="technology")
    op.drop_index(op.f("ix_technology_method_id"), table_name="technology")
    op.drop_table("technology")
    op.drop_index(op.f("ix_project_contact_id"), table_name="project")
    op.drop_table("project")
    op.drop_index(op.f("ix_ncbi_taxa_taxonomy_id"), table_name="ncbi_taxa")
    op.drop_table("ncbi_taxa")
    op.drop_index(op.f("ix_modification_modomics_id"), table_name="modification")
    op.drop_table("modification")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("taxonomy")
    op.drop_table("rna_type")
    op.drop_table("project_contact")
    op.drop_table("modomics")
    op.drop_table("method")
    op.drop_table("assembly_version")
    op.drop_table("annotation_version")
    # ### end Alembic commands ###
