#
# This is the template for the .env file which is used both by
# docker-compose/podman-compose and the backup scripts.
# So it needs to work both as a shell script and a
# docker-compose .env file. That is usually not much
# of a problem.
#

# Your preferred container CLI
# Both podman/podman-compose and docker/docker-compose should work
# if available the target platform
DOCKER=podman
DOCKER_COMPOSE=podman-compose

HTTP_PORT=8000

# We use gunicorn. The docs suggest 2*CPU worker processes.
HTTP_WORKER_PROCESSES=4

# Enter here the URL to access the API.
HTTP_PUBLIC_URL=http://127.0.0.1:5000

# That should fit for the first instance created with podman-compose.
# In doubt check "podman-compose ps".
DB_CONTAINER_NAME=docker_scimodom_db_1
APP_CONTAINER_NAME=docker_scimodom_app_1

DB_IMAGE_NAME=scimodom_db:latest
APP_IMAGE_NAME=scimodom_app:latest

# You may use relative paths below. However the backup
# scripts will only work if called from the right location
# in this case.

# Directory layout
#
# Please note that create_local_folders.py will not work
# if you change the paths.

# Where to place/search backups on the container host
HOST_BACKUP_DIR=./backup
# Where to place the secrets on the host. It must contain
# all the password files listed below.
HOST_SECRETS_DIR=./secrets
# Data for the initial database load
HOST_IMPORT_DIR=../server/import
# That is directory where the MariaDB stores it's data.
# This place should be outside the scope of the docker-compose.yml
# so that the service can be re-deployed without losing all data.
# (tbd: do Docker Volumes work too?)
HOST_DB_DATA_DIR=./db_data
# Used to inject configuration in the APP container
HOST_CONFIG_DIR=./config

# Only used for DEV setup
HOST_DEV_DB_DATA_DIR=./db_data_dev
MARIADB_DEV_PORT=3306

# No changes should be needed below
MARIADB_USER=scimodom
MARIADB_DATABASE=scimodom
MARIADB_ROOT_PASSWORD_FILE=/run/secrets/mariadb-root
MARIADB_PASSWORD_FILE=/run/secrets/mariadb-scimodom

